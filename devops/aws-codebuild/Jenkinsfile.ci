#!groovy

def projectName = 'aurora-wallet'

def evLibrary = library(identifier: 'evernym-aws-codebuild@aws-codebuild', retriever: modernSCM(
    github(credentialsId: 'evernym-github-machine-user', repoOwner: 'evernym', repository: 'jenkins-shared')
)).com.evernym.pipeline

utils = evLibrary.Utils.new(this)
logger = evLibrary.Logger.new(this)
gitHelper = evLibrary.Git.new(this)
awsCliECR = evLibrary.AwsCliECR.new(this)
awsCBHelper = evLibrary.AwsCodeBuildHelper.new(this)

logger.setGlobalLevel('TRACE')

def buildF(String osname, List goals, Map buildCtx) {
    def ciImageTag
    def artifactName = "build-${BUILD_NUMBER}.${osname}.zip"

    stage("$osname: Resolve image tag") {
        def _imgVersion = utils.shStdout("OSNAME=$osname make -C devops image_ci_version -s")
        ciImageTag = "${_imgVersion}-${osname}-ci"
        logger.info("CI docker image tag: $ciImageTag")
    }

    stage("$osname: Prepare CI project") {
        awsCBHelper.prepareCIProject(buildCtx) {
            cbProjectNameSuffix = "-$osname"
            buildspec = 'devops/aws-codebuild/buildspec.yml'
            environmentVariables = [
                [type: 'PLAINTEXT', name: 'OSNAME', value: "$osname"]
            ]
            envBuildCtxPath = ['devops'] // TODO make more accurate
            ecrImageTag = ciImageTag
        }
        logger.info("Prepared AWS infrastructure info: PROJECT $buildCtx.ciCBProject, ECR REPO $buildCtx.ciECRRepo")
    }

    stage("$osname: Build Env") {
        awsCBHelper.buildEnvCBProject(buildCtx) {
            environmentVariables = [
                [name: 'OSNAME', value: "$osname"],
                [name: 'AWS_ECR_IMAGE_TAGS', value: "$ciImageTag"],
                [name: 'AWS_ECR_REPO_NAME', value: "$buildCtx.ciECRRepo.name"],
                [name: 'DOCKER_NAME', value: "$projectName"],
                [name: 'DOCKER_TAG', value: "$ciImageTag"],
                [name: 'MAKE_GOAL', value: "image_ci"],
            ]
        }
    }

    try {
        stage("$osname: Test") {
            awsCBHelper.buildCICBProject(buildCtx) {
                artifactNameOverride = artifactName
                environmentVariables = [
                    [name: 'MAKE_GOALS', value: "${goals.join(' ')}"],
                    [name: 'OSNAME', value: "$osname"],
                ]
            }
        }
    } finally {
        dir("./_artifacts") {
            stage("$osname: Download/Remove S3 Artifacts") {
                s3Wrapper.download(unzip: true, removeAfter: true) {
                    path = "${buildCtx.ciCBProject.artifacts.path}/${artifactName}"
                    file = './artifacts.zip'
                    force = true
                }
            }

            stage("$osname: Archive artifacts") {
                goals.each {
                    def _fname = "${osname}.${it}.out"
                    sh "mv '${it}.out' '$_fname'"
                    utils.truncateFile(_fname, "${_fname}.tail")
                }
                archiveArtifacts artifacts: "${osname}.*.out*"
            }
        }
    }
}

nodeWrapper {
    List osnames = ['xenial', 'centos7']
    Map builds = [:]
    def goals = ['test_dry', 'test']
    Map buildCtx = [projectName: projectName]

    stage('Checkout from SCM') {
        checkout scm
    }

    stage('Upload source to S3') {
        awsCBHelper.uploadSourceToS3(buildCtx)
        logger.info("Uploaded current HEAD to S3 ,  metadata:  $buildCtx.s3Src")
    }

    // TODO do not create project for PR if no env chages are proposed
    stage('Prepare CI Env project') {
        awsCBHelper.prepareBuildEnvProject(buildCtx) {
            buildspec = 'devops/aws-codebuild/aws-ecr/buildspec.yml'
        }
        logger.info("Prepared AWS infrastructure info: $buildCtx.envCBProject")
    }

    osnames.each { osname ->
        if (builds.size()) {
            builds[osname] = {
                nodeWrapper {
                    stage("$osname: Checkout from SCM") {
                        checkout scm
                    }

                    buildF(osname, goals, buildCtx.clone())
                }
            }
        } else { // build on current node
            builds[osname] = {
                buildF(osname, goals, buildCtx.clone())
            }
        }
    }

    stage("Build and test") {
        builds.failFast = false
        parallel builds
    }
}
