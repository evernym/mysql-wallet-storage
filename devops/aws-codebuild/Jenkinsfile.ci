#!groovy

def evLibrary = library(identifier: 'evernym-aws-codebuild@aws-codebuild', retriever: modernSCM(
    github(credentialsId: 'evernym-github-machine-user', repoOwner: 'evernym', repository: 'jenkins-shared')
)).com.evernym.pipeline

logger = evLibrary.Logger.new(this)
logger.setGlobalLevel('TRACE')

nodeWrapper {
    List osnames = ['xenial', 'centos7']
    def goals = ['test_dry', 'test']

    stage('Checkout from SCM') {
        checkout scm
    }

    def utils = evLibrary.Utils.new(this)
    def awsCBHelper = evLibrary.AwsCodeBuildHelper.new(this)

    stage('Upload source to S3') {
        awsCBHelper.uploadSourceToS3()
    }

    Map builds = osnames.collectEntries { osname ->
        [(osname): {
            def ciImageTag
            def prTag = "ci-$osname"

            stage("$osname: Resolve image tag") {
                def _imgVersion = utils.shStdout("OSNAME=$osname make -C devops image_ci_version -s")
                ciImageTag = "${_imgVersion}-${osname}-ci"
                logger.info("CI docker image tag: $ciImageTag")
            }

            try {
                awsCBHelper.build() {
                    projectTag = prTag

                    // env and build spec
                    imageTag = ciImageTag
                    buildspec = 'devops/aws-codebuild/buildspec.yml'
                    envv = [
                        [name: 'OSNAME', value: "$osname"],
                        [name: 'MAKE_GOALS', value: "${goals.join(' ')}"],
                    ]

                    // build spec for env image
                    imageBuildSrc = ['devops', 'libaurorawallet/Cargo.toml'] // TODO make more accurate
                    imageBuildCmds = [
                        'export PROJECT_DIR=$PWD',
                        'make -C devops image_ci'
                    ].
                    imageBuildEnvv = [
                        [name: 'OSNAME', value: "$osname"],
                        [name: 'DOCKER_NAME', value: "$projectName"],
                        [name: 'DOCKER_TAG', value: "$ciImageTag"],
                    ]
                }
            } finally {
                if (awsCBHelper.buildCtx.projects[prTag].artifactsDir) {
                    dir("${awsCBHelper.buildCtx.projects[prTag].artifactsDir}/logs") {
                        stage("$osname: Archive artifacts") {
                            goals.each {
                                def _fname = "${osname}.${it}.out"
                                sh "mv '${it}.out' '$_fname'"
                                utils.truncateFile(_fname, "${_fname}.tail")
                            }
                            archiveArtifacts artifacts: "${osname}.*.out*"
                        }
                    }
                }
            }
        }]
    }

    stage("Build and test") {
        builds.failFast = false
        utils.parallel builds
    }
}
