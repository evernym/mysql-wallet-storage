#!groovy

def projectName = 'aurora-wallet'

def evLibrary = library(identifier: 'evernym-aws-codebuild@aws-codebuild', retriever: modernSCM(
    github(credentialsId: 'evernym-github-machine-user', repoOwner: 'evernym', repository: 'jenkins-shared')
)).com.evernym.pipeline

utils = evLibrary.Utils.new(this)
logger = evLibrary.Logger.new(this)
gitHelper = evLibrary.Git.new(this)
awsCliECR = evLibrary.AwsCliECR.new(this)
awsCBHelper = evLibrary.AwsCodeBuildHelper.new(this)

logger.setGlobalLevel('TRACE')

nodeWrapper {
    List osnames = ['xenial', 'centos7']
    def goals = ['test_dry', 'test']
    Map buildCtx = [projectName: projectName]

    stage('Checkout from SCM') {
        checkout scm
    }

    stage('Upload source to S3') {
        awsCBHelper.uploadSourceToS3(buildCtx)
        logger.info("Uploaded current HEAD to S3 ,  metadata:  $buildCtx.s3Src")
    }

    // TODO do not create project for PR if no env changes are proposed
    stage('Prepare CI Env project') {
        awsCBHelper.prepareEnvProject(buildCtx) {
            buildspec = 'devops/aws-codebuild/aws-ecr/buildspec.yml'
        }
        logger.info("Prepared AWS infrastructure info: $buildCtx.envCBProject")
    }

    Map builds = osnames.collectEntries {osname ->
        [(osname): {
            def ciImageTag
            def cbPrSuffix = "ci-$osname"

            stage("$osname: Resolve image tag") {
                def _imgVersion = utils.shStdout("OSNAME=$osname make -C devops image_ci_version -s")
                ciImageTag = "${_imgVersion}-${osname}-ci"
                logger.info("CI docker image tag: $ciImageTag")
            }

            awsCBHelper.build(buildCtx) {
                cbProjectNameSuffix = cbPrSuffix
                buildspec = 'devops/aws-codebuild/buildspec.yml'
                environmentVariables = [
                    [name: 'OSNAME', value: "$osname"],
                    [name: 'MAKE_GOALS', value: "${goals.join(' ')}"],
                ]

                delegate.envImage.ctxPaths = ['devops'] // TODO make more accurate
                delegate.envImage.tag = ciImageTag
                delegate.envImage.environmentVariables = [
                    [name: 'OSNAME', value: "$osname"],
                    [name: 'AWS_ECR_IMAGE_TAGS', value: "$ciImageTag"],
                    [name: 'DOCKER_NAME', value: "$projectName"],
                    [name: 'DOCKER_TAG', value: "$ciImageTag"],
                    [name: 'MAKE_GOAL', value: "image_ci"],
                ]

                artifactsClosure = {
                    this.stage("$osname: Archive artifacts") {
                        goals.each {
                            def _fname = "${osname}.${it}.out"
                            this.sh "mv '${it}.out' '$_fname'"
                            this.utils.truncateFile(_fname, "${_fname}.tail")
                        }
                        this.archiveArtifacts artifacts: "${osname}.*.out*"
                    }
                }
            }
        }]
    }
    builds.failFast = false

    stage("Build and test") {
        utils.parallel builds
    }
}
