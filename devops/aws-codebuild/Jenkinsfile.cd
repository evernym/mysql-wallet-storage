#!groovy

def evLibrary = library(identifier: 'evernym-aws-codebuild@aws-codebuild', retriever: modernSCM(
    github(credentialsId: 'evernym-github-machine-user', repoOwner: 'evernym', repository: 'jenkins-shared')
)).com.evernym.pipeline

logger = evLibrary.Logger.new(this)
logger.setGlobalLevel('TRACE')

nodeWrapper {
    def packageName = 'libaurorawallet'
    def srcVersion
    def lastRevision
    def debPVersion
    def cratePVersion

    stage('Checkout sources from SCM') {
        checkout scm
    }

    def utils = evLibrary.Utils.new(this)
    def buildCtx = evLibrary.AwsCodeBuildHelper.BuildCtx.new('aurora-wallet')
    def awsCBHelper = evLibrary.AwsCodeBuildHelper.new(this, buildCtx)

    stage('Resolve current source version') {
        srcVersion = utils.srcVersion(projectType: 'rust')
        logger.info("Current source version: $srcVersion")
    }

    stage('Resolve last revision') {
        lastRevision = evernymRepo.getLastRevision {
            delegate.packageName = packageName
            packageSrcVersion = srcVersion
            repoDistr = 'agency-dev'
        }

        if (lastRevision) {
            logger.info("Found last revision number: $lastRevision")
        } else {
            logger.info("No previous revision was found")
        }
    }

    stage('Set release parameters') {
        def releaseVersion = "${lastRevision ? lastRevision[0] + 1: 1}.$BUILD_NUMBER"

        debPVersion = utils.packageVersion('deb-kraken', srcVersion, releaseVersion)
        logger.info("Package version for evernym repo: $debPVersion")

        cratePVersion = utils.packageVersion('crate', srcVersion, releaseVersion)
        logger.info("Package version for rust registry: $cratePVersion")
    }

    def ciImageTag
    def osname = 'xenial'
    def prTag = "ci-$osname"

    stage("$osname: Resolve image tag") {
        def _imgVersion = utils.shStdout("OSNAME=$osname make -C devops image_ci_version -s")
        ciImageTag = "${_imgVersion}-${osname}-ci"
        logger.info("CI docker image tag: $ciImageTag")
    }

    stage('Upload source to S3') {
        awsCBHelper.uploadSourceToS3()
    }

    try {
        awsCBHelper.build() {
            projectTag = "ci-$osname"

            // env and build spec
            imageTag = ciImageTag
            buildspec = 'devops/aws-codebuild/buildspec.yml'
            envv = [
                [name: 'OSNAME', value: "$osname"],
                [name: 'MAKE_GOALS', value: "package"],
                [name: 'ARTIFACTS', value: 'libaurorawallet/target/release/libaurorawallet*.*'],
                [name: 'FPM_P_VERSION', value: debPVersion],
               // [name: 'CRATE_P_VERSION', value: cratePVersion],
            ]
        }
    } finally {
        if (awsCBHelper.buildCtx.projects[prTag]?.artifactsDir) {
            stage("$osname: Archive logs artifacts") {
                dir("${awsCBHelper.buildCtx.projects[prTag].artifactsDir}/logs") {
                    goals.each {
                        def _fname = "${osname}.${it}.out"
                        sh "mv '${it}.out' '$_fname'"
                        utils.truncateFile(_fname, "${_fname}.tail")
                    }
                    archiveArtifacts artifacts: "${osname}.*.out*"
                }
            }
        }
    }

    stage('Upload deb to Evernym repo') {
        dir("${awsCBHelper.buildCtx.projects[prTag].artifactsDir}/logs") {
            evernymRepo.upload {
                repoDistr = 'agency_dev'
                delegate.packagePath = "$packageName*$debPVersion*.deb"
            }
        }
    }

    ['agency_dev', 'agency_qa'].each { distr ->
        stage("Promote deb from $distr") {
            evernymRepo.promote {
                repoDistr = distr
                delegate.packageName = packageName
                delegate.packageVersion = debPVersion
            }
        }
    }
}
